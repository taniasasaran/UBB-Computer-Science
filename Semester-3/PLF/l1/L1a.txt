; a
(defun linear (l)
    (cond
        ( (null l) 1 )
        ( (listp (car l)) 0 )
        ( t (linear (cdr l)))
    )
)

(print (linear '(2 (2) 2 4)))

; b
(defun rplc (l e o)
    (cond
        ( (null l) l )
        ( (= (car l) e) (cons o (cdr l)) )
        ( t (cons (car l) (rplc (cdr l) e o)))
    )
)

(print (rplc '(2 3 2 4) 3 6))

; c
(defun getlast (l)
    (cond
        ( (null (cdr l)) (car l) )
        ( t (getlast (cdr l)) )
    )
)
(defun linear (l)
    (cond
        ( (null l) 1 )
        ( (listp (car l)) 0 )
        ( t (linear (cdr l)))
    )
)
(defun rplc (l)
    (cond
        ( (null l) l )
        ( (listp (car l)) (cons (getlast (car l)) (rplc (cdr l))))
        ( t (cons (car l) (rplc (cdr l))))
    )
)
(defun doc (l)
    (cond
        ( (null l) l )
        ( (= (linear l) 0) (doc (rplc l)))
        ( t l)
    )
)
(print (getlast '(2 3 2 (2))))
(print (doc '(a (b c) (d (e (f))))))
(print (doc '(a (b c) (d ((e) f)))))


; d
(defun mrge (l1 l2)
    (cond
        ((null l1) l2)
        ((null l2) l1)
        ((< (car l1) (car l2)) (cons (car l1) (mrge (cdr l1) l2)))
        ((> (car l1) (car l2)) (cons (car l2) (mrge l1 (cdr l2))))
        ((= (car l1) (car l2)) (cons (car l1) (mrge (cdr l1) (cdr l2))))
    )
)

(print (mrge '(1 3 5) '(1 2 6 8)))     (1 2 3 5 6 8) 
(print (mrge '(1 4 7 9) '(2 4 5 8)))   (1 2 4 5 7 8 9) 





